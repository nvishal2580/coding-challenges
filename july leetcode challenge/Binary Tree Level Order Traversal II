/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>>ans;
        if(root == nullptr) return ans;
        queue<TreeNode*> q;
        q.push(root);
        int i=0,c=1;
         vector<int>x;
        int currentLevel = 1;
        int nextLevel = 0;
        while(!q.empty()){
           // cout<<i<<endl;
            TreeNode* temp = q.front();
            q.pop();
           
            x.push_back(temp->val);
            currentLevel--;
           
            if(temp->left != nullptr) {q.push(temp->left);nextLevel++; }
            
            if(temp->right != nullptr){ q.push(temp->right);nextLevel++;}
            
            if(currentLevel == 0){
                ans.push_back(x);
                x.clear();
                currentLevel = nextLevel;
                nextLevel = 0;
            }
            
        }
        int n = ans.size();
        for(int i=0;i<n/2;i++){
            vector<int>t = ans[i];
            ans[i]=ans[n-i-1];
            ans[n-i-1]= t;
        }
        return ans;
    }
};
